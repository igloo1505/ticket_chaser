generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum VERIFICATIONSTATUS {
    Verified
    Pending
    Unverified
}

enum USSTATE {
    AL
    AK
    AS
    AZ
    AR
    UM_81
    CA
    CO
    CT
    DE
    DC
    FL
    GA
    GU
    HI
    UM_84
    ID
    IL
    IN
    IA
    UM_86
    UM_67
    KS
    KY
    UM_89
    LA
    ME
    MD
    MA
    MI
    UM_71
    MN
    MS
    MO
    MT
    UM_76
    NE
    NV
    NH
    NJ
    NM
    NY
    NC
    ND
    MP
    OH
    OK
    OR
    UM_95
    PA
    PR
    RI
    SC
    SD
    TN
    TX
    UM
    VI
    UT
    VT
    VA
    UM_79
    WA
    WI
    WV
    WY
}

enum ROLE {
    USER
    ADMIN
    BANNED
    EMPLOYEE
}

enum AMENITIY {
    total
    partial
    none
}

enum PARKING {
    limited
    valet
    withTicket
    offstreet
}

enum CATEGORY {
    Music
    Sports
    Comedy
}

enum Leagues {
    NFL
    NCAA
}

// TODO: Come back and complete this list when on wifi
enum NFLTeamName {
   Packers
   Patriots
   Bears
   Panthers
   Jaguars
   Dolphins
   Niners
   Texans
   Saints
   Vikings
   Broncos
   Chargers
   Rams
   Colts
   Raiders
}


enum Sports {
    Basketball
    Football
    Soccer
    MMA
    Motorsports
}

model Faq {
    id        Int      @id @default(autoincrement())
    title     String
    subtitle  String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    priority  Int      @default(1)
}

// BUG: Change this to allow many to many relationships between teams and events. Need to get back on wifi to check syntax.
model Team {
    id           Int     @id @default(autoincrement())
    name         NFLTeamName
    abbreviation String?
    league       Leagues @default(NFL)
    sport        Sports  @default(Football)
    homeArena    Arena?  @relation(fields: [homeArenaId], references: [id])
    homeArenaId  Int?
    Event        Event?  @relation(fields: [eventId], references: [id])
    eventId      Int?
}

model Location {
    id              Int              @id @default(autoincrement())
    street          String?
    zip             Int?
    city            String
    cityId          Int?
    state           USSTATE          @default(WI)
    lat             Float?
    long            Float?
    arena           Arena[]
    personalDetails PersonalDetails? @relation(fields: [userId], references: [id])
    userId          Int?             @unique
}

model LegalName {
    first           String
    middle          String?
    last            String
    personalDetails PersonalDetails @relation(fields: [detailsId], references: [id])
    detailsId       Int             @unique
}

model PersonalDetails {
    id       Int        @id @default(autoincrement())
    user     User       @relation(fields: [userId], references: [id])
    userId   Int        @unique
    name     LegalName?
    location Location?
}

model User {
    id                      Int                    @id @default(autoincrement())
    email                   String                 @unique
    password                String
    role                    ROLE                   @default(USER)
    createdAt               DateTime               @default(now())
    paymentAccount          PaymentAccountDetails? @relation(fields: [paymentAccountDetailsId], references: [id])
    paymentAccountDetailsId Int?
    purchaseHistory         PurchaseHistory?
    personalDetails         PersonalDetails?
    verified                VERIFICATIONSTATUS     @default(Unverified)
}

model Event {
    id           Int            @id @default(autoincrement())
    category     CATEGORY
    arena        Arena          @relation(fields: [arenaId], references: [id])
    arenaId      Int
    tickets      Ticket[]
    ticketGroups TicketGroup[]
    amenities    ArenaAmenities @relation(fields: [amenitiesId], references: [id])
    amenitiesId  Int
    tags         Tag[]
    date         DateTime
    title        String
    description  String
    participants Team[]
}

model TicketGroup {
    id             Int      @id @default(autoincrement())
    Event          Event?   @relation(fields: [eventId], references: [id])
    eventId        Int?
    tickets        Ticket[]
    seatedTogether Boolean
}

model Ticket {
    id             Int          @id @default(autoincrement())
    Event          Event?       @relation(fields: [eventId], references: [id])
    eventId        Int?
    TicketGroup    TicketGroup? @relation(fields: [ticketGroupId], references: [id])
    ticketGroupId  Int?
    arenaSection   ArenaSection @relation(fields: [arenaSectionId], references: [id])
    arenaSectionId Int
}

model ArenaSection {
    id      Int      @id @default(autoincrement())
    name    String
    Arena   Arena    @relation(fields: [arenaId], references: [id])
    arenaId Int
    Ticket  Ticket[]
}

model ArenaAmenities {
    id               Int      @id @default(autoincrement())
    Arena            Arena[]
    indoor           AMENITIY @default(partial)
    covered          AMENITIY @default(partial)
    outdoor          AMENITIY @default(partial)
    food             Boolean  @default(true)
    alcohol          Boolean  @default(true)
    parking          PARKING  @default(limited)
    shuttleAvailable Boolean  @default(false)
    Event            Event[]
}

model Tag {
    id    Int     @id @default(autoincrement())
    value String
    Event Event[]
}

model Image {
    id        Int      @id @default(autoincrement())
    publicUrl String?
    Arena     Arena[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Arena {
    id               Int            @id @default(autoincrement())
    name             String
    events           Event[]
    location         Location       @relation(fields: [locationId], references: [id])
    sections         ArenaSection[]
    amenities        ArenaAmenities @relation(fields: [arenaAmenitiesId], references: [id])
    sectionImage     Image          @relation(fields: [sectionImageId], references: [id])
    arenaAmenitiesId Int
    locationId       Int
    sectionImageId   Int
    homeTeams        Team[]
}

model PaymentAccountDetails {
    id            Int    @id @default(autoincrement())
    nameOnAccount String
    User          User[]
}

model Transaction {
    id        Int             @id @default(autoincrement())
    price     Float
    paymentId String
    sellerId  Int
    buyerId   Int
    seller    PurchaseHistory @relation(fields: [sellerId], references: [id], name: "seller")
    buyer     PurchaseHistory @relation(fields: [buyerId], references: [id], name: "buyer")
    date      DateTime        @default(now())
}

model TransactionUnbound {
    id        Int      @id @default(autoincrement())
    price     Float
    paymentId String
    sellerId  Int
    buyerId   Int
    date      DateTime @default(now())
}

model PurchaseHistory {
    id     Int           @id @default(autoincrement())
    bought Transaction[] @relation("buyer")
    sold   Transaction[] @relation("seller")
    user   User          @relation(fields: [userId], references: [id])
    userId Int           @unique
}
